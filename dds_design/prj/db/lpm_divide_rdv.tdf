--lpm_divide DEVICE_FAMILY="Cyclone IV E" LPM_DREPRESENTATION="UNSIGNED" LPM_NREPRESENTATION="UNSIGNED" LPM_PIPELINE=20 LPM_REMAINDERPOSITIVE="TRUE" LPM_WIDTHD=26 LPM_WIDTHN=52 MAXIMIZE_SPEED=6 OPTIMIZE_FOR_SPEED=5 aclr(gnd) clken(vcc) clock denom numer quotient remain CARRY_CHAIN="MANUAL" CARRY_CHAIN_LENGTH=48 IGNORE_CARRY_BUFFERS="OFF"
--VERSION_BEGIN 23.1 cbx_cycloneii 2024:05:14:17:57:38:SC cbx_lpm_abs 2024:05:14:17:57:38:SC cbx_lpm_add_sub 2024:05:14:17:57:38:SC cbx_lpm_divide 2024:05:14:17:57:38:SC cbx_mgl 2024:05:14:17:57:46:SC cbx_nadder 2024:05:14:17:57:38:SC cbx_stratix 2024:05:14:17:57:38:SC cbx_stratixii 2024:05:14:17:57:38:SC cbx_util_mgl 2024:05:14:17:57:38:SC  VERSION_END


-- Copyright (C) 2024  Intel Corporation. All rights reserved.
--  Your use of Intel Corporation's design tools, logic functions 
--  and other software and tools, and any partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Intel Program License 
--  Subscription Agreement, the Intel Quartus Prime License Agreement,
--  the Intel FPGA IP License Agreement, or other applicable license
--  agreement, including, without limitation, that your use is for
--  the sole purpose of programming logic devices manufactured by
--  Intel and sold by Intel or its authorized distributors.  Please
--  refer to the applicable agreement for further details, at
--  https://fpgasoftware.intel.com/eula.


FUNCTION sign_div_unsign_dai (clock, denominator[25..0], numerator[51..0])
RETURNS ( quotient[51..0], remainder[25..0]);

--synthesis_resources = lut 1100 reg 3140 
SUBDESIGN lpm_divide_rdv
( 
	aclr	:	input;
	clken	:	input;
	clock	:	input;
	denom[25..0]	:	input;
	numer[51..0]	:	input;
	quotient[51..0]	:	output;
	remain[25..0]	:	output;
) 
VARIABLE 
	divider : sign_div_unsign_dai;
	const_node_aclr	: NODE;
	const_node_clken	: NODE;
	numer_tmp[51..0]	: WIRE;

BEGIN 
	divider.clock = clock;
	divider.denominator[] = denom[];
	divider.numerator[] = numer_tmp[];
	const_node_aclr = aclr;
	const_node_clken = clken;
	numer_tmp[] = numer[];
	quotient[] = divider.quotient[];
	remain[] = divider.remainder[];
END;
--VALID FILE
